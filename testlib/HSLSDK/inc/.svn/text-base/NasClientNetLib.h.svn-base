#ifndef _H_NAS_CLIENT_NET_LIB_INC_
#define _H_NAS_CLIENT_NET_LIB_INC_

#include "NasDefine.h"

#ifdef _WIN32
#define DEVICE_NET_API	__declspec(dllexport)
#else
#define DEVICE_NET_API
#endif

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

/*
 * 初始化wvr sdk
 */
DEVICE_NET_API int nas_net_work_init(const char *serv);

/*
 * 释放sdk资源
 */
DEVICE_NET_API int nas_net_work_deInit();

/*
 * 检测网络，此接口执行耗时，使用单独线程调用一次即可
 */
DEVICE_NET_API int nas_net_work_NetworkDetect();

DEVICE_NET_API unsigned int nas_net_work_GetAPIVersion();
DEVICE_NET_API unsigned int nas_net_work_GetP2PVersion();

/*
 * 创建wvr资源
 @RETURN >=0成功
 */
DEVICE_NET_API	int nas_net_work_createInstance(struct __login_user_info_t t, int NetType); // 0/1: tcp/p2p

/*
 * 释放wvr资源
 * @UserID nas_net_work_createInstance返回
 */
DEVICE_NET_API	int nas_net_work_destroyInstance(int UserID);

/*
 * 启动实例
 */
DEVICE_NET_API	int nas_net_work_start(int UserID);

/*
 * 关闭实例
 */
DEVICE_NET_API	int nas_net_work_stop(int UserID);

/*
 * 设置p2p模式回调函数
 */
DEVICE_NET_API	int nas_net_work_set_p2pmode_callback(int UserID, P2PModeCallBack pfn, void *pUser);

/*
 * 设置报警消息回调函数
 */
DEVICE_NET_API	int nas_net_work_set_alarmMessage_callback(int UserID, AlarmCallBack pfn, void *pUser);

/*
 * 设置事件回调函数
 */
DEVICE_NET_API	int nas_net_work_set_event_callback(int UserID, EventCallBack f, void *pUser);


DEVICE_NET_API	int nas_net_work_ptz(int UserID, int nType, int channel);

/*
 * 设置参数获取、设置回调函数
 */
DEVICE_NET_API	int nas_net_work_param_callback(int UserID, get_param_callback fget, set_param_callback fset, void *pUser);

/*
 * 设置设备参数
 * nType 参数类型
 * @param 参数结构
 * @nLen 参数大小
 */
DEVICE_NET_API	int nas_net_work_set_param(int UserID, unsigned int nType, const char * param , unsigned int nLen);

/*
 * 获取设备参数
 */
DEVICE_NET_API	int nas_net_work_get_param(int UserID, unsigned int nType);


/*
 * 设置录像查询回调函数
 */
DEVICE_NET_API	int nas_record_file_callback(int UserID, NasSearchRecordFileCallBack pCallBack, void *pUser);

/*
 * 查询录像
 */
DEVICE_NET_API	int nas_record_file_search(int UserID, Nas_Search_File *SearchCondition);

/*
 * 设置录像音视频数据回调
 */
DEVICE_NET_API	int nas_record_data_callback(int UserID, AVDataCallBack pCallBack , void *pUser);

/*
 * 录像播放控制
 */
DEVICE_NET_API	int nas_record_playback_control(int UserID, NasPlayRecordFile *playInfo);


/*
 * 打开视频流
 */
DEVICE_NET_API	int nas_net_work_startStream(int UserID, int StreamId, int channel, AVDataCallBack pCallBack, void *pUser);

/*
 * 关闭视频流
 */
DEVICE_NET_API	int nas_net_work_stopStream(int UserID, int channel);

/*
 * 打开视频流2
 */
DEVICE_NET_API	int nas_net_work_startStreamV2(int UserID, int StreamId, int subStreamId, int channel, AVDataCallBack pCallBack, void *pUser);

/*
 * 打开监听
 */
DEVICE_NET_API	int nas_net_work_startAudio(int UserID, int AudioId, int channel, AVDataCallBack pCallBack, void *pUser);

/*
 * 关闭监听
 */
DEVICE_NET_API	int nas_net_work_stopAudio(int UserID, int channel);

/*
 * 打开对讲
 */
DEVICE_NET_API	int nas_net_work_startTalk(int UserID, int channel);

/*
 * 关闭对讲
 */
DEVICE_NET_API	int nas_net_work_stopTalk(int UserID, int channel);

/*
 * 发送对讲数据
 */
DEVICE_NET_API	int nas_net_work_sendTalkData(int UserID, int channel, const char * param, int nLen);

/*
 * 以下三个位camera透传，目前无意义
 */
// transparent
DEVICE_NET_API	int nas_net_work_channel_param_callback(int UserID, get_param_callback fget , set_param_callback fset , void *pUser);
DEVICE_NET_API	int nas_net_work_set_channel_param(int UserID, unsigned int nType, int channel, const char * param , unsigned int nLen);
DEVICE_NET_API	int nas_net_work_get_channel_param(int UserID, unsigned int nType, int channel);

/*
 * 初始化搜索设备资源
 */
DEVICE_NET_API	int nas_broadcast_Initialization();

/*
 * 释放搜索设备资源
 */
DEVICE_NET_API	int nas_broadcast_unInitialization();

/*
 * 搜索设备
 */
DEVICE_NET_API	int nas_broadcast_search(BroadcastSearchCallback pcallback, void *pUser);

#ifdef __cplusplus
}
#endif // __cplusplus

#endif