////  FavoriteDeviceController.m//  security2.0////  Created by Sen5 on 16/6/29.//  Copyright © 2016年 com.letianxia. All rights reserved.//#import "FavoriteDeviceController.h"#import "addFavorateViewController.h"#import "UIViewController+MBProgressHUD.h"#import "UIColor+Hex.h"#import "prefrenceHeader.h"#import "simulatorOperation.h"#import "CamObj.h"#import "myCollectionViewCell.h"#import "HouseModelHandle.h"#import "MBProgressHUD.h"#import "favorateCell.h"#import "DeviceModel.h"#import "navigationItem.h"#import "displayView.h"#import "operationView.h"#import "DisConnectedBtn.h"#import "MBProgressHUD.h"#import "GTMBase64.h"#import "HouseModelHandle.h"#import "RONetworking.h"#import "SvUDIDTools.h"#import "RODeviceHandle.h"#import "deviceViewController.h"#import "XLPlainFlowLayout.h"#import "IPCClientNetLib.h"#import "StreamPlayLib.h"#import "AppDelegate.h"#import "Masonry.h"#import <AudioToolbox/AudioToolbox.h>#define kMinimumSpacing 1#define kItemCount 3#define kMiniItemNumbers 12typedef enum : NSUInteger {    kModeAway = 2,    kModeStay,    kModeDisarm,} kCurrentMode;@interface FavoriteDeviceController ()<UICollectionViewDataSource,UICollectionViewDelegate,addFavorateDelegate,UIScrollViewDelegate,operatonViewDelegate,DisConnectedBtnDelegate>@property(nonatomic,strong)UIImageView *headerView;@property(nonatomic,strong)displayView *displayView;@property(nonatomic,strong)operationView *operView;@property(nonatomic,weak)UILabel *favorateLabel;@property(nonatomic,assign)kImagesType imagesType;@property (nonatomic, strong) DisConnectedBtn *disConnectedBtn;     // 错误按钮  只有在链接错误的时候才显示出来/**重连home定时器*/@property (nonatomic, strong) NSTimer *reConnectTimer;/**重连标志，YES表示正在重连*/@property (nonatomic, assign) BOOL reconectFlag;// 判断界面中是否还有启动的传感或警报@property (nonatomic,strong) NSMutableDictionary *alarms;@end@implementation FavoriteDeviceController{    UICollectionView *_collectionView;    NSMutableArray *_dataList;    UICollectionViewFlowLayout *_layout;    favorateCell *_selectedCell;    NSInteger _currentMode;    //mode_list    NSMutableDictionary *_modeList;        BOOL _open;    }- (instancetype)init{    self = [super init];    if (self) {        //添加通知        [self addNotifications];    }    return self;}- (void)viewDidLoad {    [super viewDidLoad];        [self createDataList:nil];    [self.navigationController.navigationBar setHidden:YES];    [self createFlowOut];        if (([[[UIDevice currentDevice] systemVersion] doubleValue] >= 7.0)) {        self.edgesForExtendedLayout = UIRectEdgeNone;        self.automaticallyAdjustsScrollViewInsets = NO;    }        //设置displayView的图片形式    self.imagesType = kImagesOk;        //创建子视图    [self createDisconnectedBtn];           }- (void)dealloc{    [[NSNotificationCenter defaultCenter] removeObserver:self];}#pragma mark - 点击事件//disConnectedBtnClick的点击事件- (void)disConnectedBtnClick:(DisConnectedBtn *)sender {    //根据sender的reson 返回不同的事件    switch (sender.reason) {        case DisConnectedNoHouse:        {            //[self.navigationController pushViewController:[[NSClassFromString(@"AddHouseVC") alloc] init] animated:YES];                        break;        }        case DisConnectedFailed:        {            [self showWithTime:hubAnimationTime title:NSLocalizedString(@"Please check your network", nil)];            break;        }        case DisConnectedP2PConnectError:        {                if (self.reConnectTimer.isValid == YES) {  //防止在定时器期间  使用其他方式去重连house                    [self.reConnectTimer invalidate];                    self.reConnectTimer = nil;                }                                [self reconnectHouse];            }            break;                default:            break;    }}#pragma mark - data source-(void)createDataList:(NSArray *)dev_ids{    if (!dev_ids) {                dev_ids = [NSDictionary dictionaryWithContentsOfFile:[[fileOperation sharedOperation] getHomePath:kFavorate_Device]][@"dev_list"];    }        NSArray *devices = [[fileOperation sharedOperation] getDeviceWithDev_ID:dev_ids];        _dataList = nil;    _dataList = [NSMutableArray arrayWithArray:devices];        [_collectionView reloadSections:[NSIndexSet indexSetWithIndex:0]];   }#pragma mark - layout-(void)createFlowOut{    XLPlainFlowLayout *flow = [XLPlainFlowLayout new];        CGFloat widtn =( CGRectGetWidth(self.view.frame)-kMinimumSpacing*(kItemCount - 1))/3.0f;        flow.itemSize = CGSizeMake(widtn, widtn)    ;    flow.minimumInteritemSpacing = kMinimumSpacing;    flow.minimumLineSpacing = kMinimumSpacing;    flow.headerReferenceSize = CGSizeMake(kSelfViewWidth, kSelfViewHeightWithoutTabBar/3.0f);        _collectionView = [[UICollectionView alloc] initWithFrame:self.view.bounds collectionViewLayout:flow];    _collectionView.backgroundColor = kLightBackgroudColor;    _collectionView.dataSource = self;    _collectionView.delegate = self;        _collectionView.showsHorizontalScrollIndicator = NO;    _collectionView.showsVerticalScrollIndicator = NO;        _collectionView.bounces = YES;    [self.view addSubview:_collectionView];        self.displayView = [[displayView alloc] initWithFrame:CGRectMake(0,(-kSelfViewHeightWithoutTabBar/3.0f), kSelfViewWidth, kSelfViewHeightWithoutTabBar/3.0f+64)];        self.displayView.backgroundColor = kMainGreenColor;    [self.view addSubview:self.displayView];    //利用内嵌添加头部视图  //  self.headerView = [[UIImageView alloc] initWithFrame:CGRectMake(0, -200, [UIScreen mainScreen].bounds.size.width, 200)];   // self.headerView.image = [UIImage imageNamed:@"1.jpg"];        //添加到TableView之上    [_collectionView addSubview:self.displayView];    //放到图层的最后    [_collectionView sendSubviewToBack:self.headerView];        [_collectionView registerClass:[UICollectionReusableView class] forSupplementaryViewOfKind:UICollectionElementKindSectionHeader withReuseIdentifier:@"reuse_header"];        //修改内嵌值    _collectionView.contentInset = UIEdgeInsetsMake(kSelfViewHeightWithoutTabBar/3.0f+64, 0, 0, 0);            [_collectionView registerClass:[favorateCell class] forCellWithReuseIdentifier:@"reuse"];    [_collectionView registerClass:[UICollectionViewCell class] forCellWithReuseIdentifier:@"reuse_add"];    [_collectionView registerClass:[UICollectionViewCell class] forCellWithReuseIdentifier:@"reuse_back"];}#pragma mark - 滑动视图的代理-(void)scrollViewDidEndDecelerating:(UIScrollView *)scrollView{    if (scrollView.contentOffset.y<(-kSelfViewHeightWithoutTabBar/3.0f)/2.0f) {            }}-(void)scrollViewDidScroll:(UIScrollView *)scrollView{            if (scrollView.contentOffset.y < (-kSelfViewHeightWithoutTabBar/3.0f-64)) {                //往上移动10个单位        //position 相当于UIView的center        self.displayView.layer.position = CGPointMake([UIScreen mainScreen].bounds.size.width / 2.0,  scrollView.contentOffset.y / 2.0);                //设置一个放大系数        CGFloat scale = fabs(scrollView.contentOffset.y) / (kSelfViewHeightWithoutTabBar/3.0f+64);                //触发放大缩小        self.displayView.transform = CGAffineTransformMakeScale(scale, scale);            }else{                //往上移动10个单位        //position 相当于UIView的center        self.displayView.layer.position = CGPointMake([UIScreen mainScreen].bounds.size.width / 2.0,  scrollView.contentOffset.y / 2.0);                //设置一个放大系数        CGFloat scale = fabs(scrollView.contentOffset.y) / (kSelfViewHeightWithoutTabBar/3.0f+64);                //触发放大缩小        self.displayView.transform = CGAffineTransformMakeScale(1                                                               , scale);                //   CGFloat alpha = (scrollView.contentOffset.y + 200) / (200 - 64);                //改变背景色的透明度        // self.titleLabel.backgroundColor = [UIColor colorWithRed:0 green:0 blue:1 alpha:alpha];            }    }-(NSInteger )collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section{    NSInteger cal = _dataList.count % 3;        if (cal == 0) {        return  _dataList.count +kMiniItemNumbers;    }else if (cal == 1)    {        return  _dataList.count +kMiniItemNumbers-1;    }else    {         return  _dataList.count +kMiniItemNumbers-2;        }    }-(NSInteger) numberOfSectionsInCollectionView:(UICollectionView *)collectionView{    return 1;}- (UICollectionReusableView *)collectionView:(UICollectionView *)collectionView viewForSupplementaryElementOfKind:(NSString *)kind atIndexPath:(NSIndexPath *)indexPath{    UICollectionReusableView *header = [collectionView  dequeueReusableSupplementaryViewOfKind:UICollectionElementKindSectionHeader withReuseIdentifier:@"reuse_header" forIndexPath:indexPath];      header.backgroundColor = [UIColor whiteColor];        operationView *oper = [[operationView alloc]initWithFrame:CGRectMake(0,0, kSelfViewWidth, kSelfViewHeightWithoutTabBar*0.8/3.0f+2)];    oper.delegate =self;    [header addSubview:oper];    self.operView = oper;    [self.operView selectAnyBtn:_currentMode+100];        UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(0, kSelfViewHeightWithoutTabBar*(0.8)/3.0, kSelfViewWidth, kSelfViewHeightWithoutTabBar/3.0f*0.2)];    [label setText:NSLocalizedString(@"Favorate_device", nil)];    [label setTextColor:kLightTitleColor];    [label setBackgroundColor:kLightBackgroudColor];    [header addSubview:label];    self.favorateLabel = label;        [header sendSubviewToBack:label];    return header;    }-(UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath{        // 怎样 怎样        if (indexPath.row < _dataList.count) {            favorateCell *cell = [collectionView dequeueReusableCellWithReuseIdentifier:@"reuse" forIndexPath:indexPath];                        [cell refreshUIWithModel:_dataList[indexPath.item]];                        return cell;                    }else if (indexPath.row == _dataList.count){                        UICollectionViewCell *cell = [collectionView dequeueReusableCellWithReuseIdentifier:@"reuse_add" forIndexPath:indexPath];            //[cell refreshUIWithModel:nil];            UIImageView *image = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"btn_add_dashboard_nor_"]];            image.center = cell.contentView.center;            cell.backgroundColor = [UIColor whiteColor];            [cell.contentView addSubview:image];            return cell;                    }else        {            UICollectionViewCell *cell = [collectionView dequeueReusableCellWithReuseIdentifier:@"reuse_back" forIndexPath:indexPath];            cell.backgroundColor = [UIColor whiteColor];            return  cell;        }}-(void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath{        if (indexPath.row == _dataList.count) {                for (DeviceModel *dev in _dataList) {            dev.isFavorate = YES;        }        if ([[P2Phandle shareP2PHandle ] linkState] == P2PLinkConnnected) {                                    addFavorateViewController *add = [[addFavorateViewController alloc] initWithFavorates:[_dataList copy]];            add.delegate = self;                        [self.navigationController pushViewController:add animated:YES];                                }else        {            [self showWithTime:hubAnimationTime title:kConnectedFailed];        }         }else if(indexPath.row < _dataList.count)    {        if ([[P2Phandle shareP2PHandle ] linkState] == P2PLinkConnnected) {                        //[self.navigationController pushViewController:add animated:YES];            [self.hubView show:YES];            [self.hubView hide:YES afterDelay:HubViewDelayTime];                        DeviceModel *mod = _dataList[indexPath.row];                        if (mod.status.count != 0) {                            if ([mod.status[0][@"params"] isEqualToString:@"AQ=="]) {                //如果选中状态 则关闭                [[P2Phandle shareP2PHandle] ControlDeviceWithDeviceID:mod.dev_id tableID:mod.table_id action:0];            }else            {                //如果未选中 则打开                [[P2Phandle shareP2PHandle] ControlDeviceWithDeviceID:mod.dev_id tableID:mod.table_id action:1];            }            }else            {                // 之前用的随机数 但是还是不是很合理  所以建立一个全局变量                [[P2Phandle shareP2PHandle] ControlDeviceWithDeviceID:mod.dev_id tableID:mod.table_id action:_open];                _open = !_open;            }                    }else        {            [self showWithTime:hubAnimationTime title:kConnectedFailed];        }            }}#pragma mark - notification#pragma mark - 通知管理-(void)willEnterForegroud{    [self.displayView refreshAnimationViewWithTag:self.imagesType];}-(void )willEnterBackground{    }//reachabilityChanged的通知 设置disConnectedBtn 的title属性- (void)reachabilityChanged:(NSNotification *)notification {        if (self.wifiReachability.currentReachabilityStatus == NotReachable) {        dispatch_async(dispatch_get_main_queue(), ^{            [self.disConnectedBtn setWithWrongSeason:DisConnectedFailed];        });    } else {                if ([HouseModelHandle shareHouseHandle].houses.count <= 0) {            [self.disConnectedBtn setWithWrongSeason:DisConnectedNoHouse];        } else if ([P2Phandle shareP2PHandle].linkState == P2PLinkUnConnnected) {            [self.disConnectedBtn setWithWrongSeason:DisConnectedP2PConnectError];        }    };}- (void)willConnectToP2P:(NSNotification *)notification {        if (self.reconectFlag == YES) {  //如果是重连  就不显示菊花..        return ;    }        dispatch_async(dispatch_get_main_queue(), ^{        [self.hubView show:YES];        [self.hubView hide:YES afterDelay:10];    });         dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{            });}- (void)didConnectToP2P:(NSNotification *)notification {        dispatch_async(dispatch_get_main_queue(), ^{                [self.hubView hide:YES];                [self.disConnectedBtn animationWithFlag:YES];        //停止定时器.        [self.reConnectTimer invalidate];    });                    [[P2Phandle shareP2PHandle] authenticate];        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(3 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{                [[NSNotificationCenter defaultCenter ]postNotificationName:NOTIFICATION_PERMISSION object:nil];});    }//连接失败后的处理方法- (void)disConnected:(NSNotification *)notification {        dispatch_async(dispatch_get_main_queue(), ^{                [self.hubView hide:NO];        if ([HouseModelHandle shareHouseHandle].houses.count <= 0) {            [self.disConnectedBtn setWithWrongSeason:DisConnectedNoHouse];        } else if (self.wifiReachability.currentReachabilityStatus == NotReachable) {            [self.disConnectedBtn setWithWrongSeason:DisConnectedFailed];            //定时器，10s后重连            [self reConnectTimerSet];        }else if(([notification.object isEqualToString:@"userId"]) || ([P2Phandle shareP2PHandle].initivalDisConnect == true)){            [self.disConnectedBtn setWithWrongSeason:DisConnectedCheckUserIDFail];        }else {            [self.disConnectedBtn setWithWrongSeason:DisConnectedP2PConnectError];            //定时器，10s后重连            [self reConnectTimerSet];        }        [self.disConnectedBtn animationWithFlag:NO];            });    }-(void)modeTrigger:(NSNotification *)notice{    NSDictionary *dic = notice.object;        NSInteger tag = [dic[@"cur_sec_mode"] integerValue];    _currentMode = tag;    [self.operView selectAnyBtn:tag+100];    [self checkAlarms];}-(void )modeListUpdated:(NSNotification *)notice{    NSDictionary *dic = notice.object;        _modeList = nil;    _modeList = [NSMutableDictionary dictionaryWithDictionary:dic];        NSInteger tag = [dic[@"cur_sec_mode"] integerValue];    _currentMode = tag;        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{        // wait a moment        [self.operView selectAnyBtn:tag+100];    });        [self checkAlarms];}-(void )deviceDeleted:(NSNotification *)notice{    [self refreshUI];}-(void )deviceEdited:(NSNotification *)notice{     [self refreshUI];}-(void )statusListUpdated:(NSNotification *)notice{   // 获取状态列表    NSDictionary *dic = [(NSDictionary *)notice.object objectForKey:@"status_list"];        for (NSDictionary *diction in dic) {        if ([diction[@"status"] count] !=  0) {                    if ([diction[@"status"][0][@"id"] isEqualToNumber:@(2)]) {            if ([[diction[@"status"][0][@"params"] substringToIndex:2] isEqualToString:@"AQ"]) {                            [self.alarms setObject:@"AQ" forKey:[NSString stringWithFormat:@"%@",diction[@"dev_id"]]];            }        }                    }    }    // 更新警报界面    if (self.alarms.allKeys.count == 0)    {        self.imagesType = kImagesOk;    }else    {        self.imagesType = kImagesIntrusion;    }        [self.displayView refreshAnimationViewWithTag:self.imagesType];       [self refreshUI];         dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{         NSArray *temps = [[fileOperation sharedOperation] getTemperatures];                  if (temps.count != 0) {             //假如有多个温度计的话 只进行判断第一个（henry）             [self judgeParticularDevices:temps[0]];         }        });    }#pragma mark - 设备处理-(void )judgeParticularDevices:(DeviceModel *)device{    [RODeviceHandle sharedDeviceHandle];        if ([device.dev_type isEqualToString:@"A010403020000"]) {        //温湿度        NSDictionary *tempParams = [[RODeviceHandle sharedDeviceHandle] StatusOrEventWithModel:device];        NSString *notificationName = tempParams[NOTIFICATION_NAME];        NSDictionary *userInfo = tempParams[USER_INFO];                dispatch_async(dispatch_get_main_queue(), ^{                        [[NSNotificationCenter defaultCenter ] postNotificationName:notificationName object:userInfo];        });    }    }//重启定时器- (void)reConnectTimerSet{    //先取消 再重连    if (self.reConnectTimer.isValid == YES) {  //防止在定时器期间  使用其他方式去重连house        [self.reConnectTimer invalidate];        self.reConnectTimer = nil;    }        self.reConnectTimer = [NSTimer scheduledTimerWithTimeInterval:10.0 target:self selector:@selector(reconnectHouse) userInfo:nil repeats:NO];    }- (void) reconnectHouse{    self.reconectFlag = YES;    [self.disConnectedBtn setWithWrongSeason:DIsConnectedReconnect];        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{        int ret = 0;        //重新初始化cameraObject        [CamObj deinitAPI];                [CamObj initAPI];        HouseModel *house = [HouseModelHandle shareHouseHandle].currentHouse;        ret = [[P2Phandle shareP2PHandle] connectWithTimeout:10 nsDID:house.address nsCamName:house.name];                if (ret < 0) { //重连失败..            dispatch_async(dispatch_get_main_queue(), ^{                [self.disConnectedBtn setWithWrongSeason:DisConnectedP2PConnectError];                if (self.reConnectTimer.isValid == YES) {  //防止在定时器期间  使用其他方式去重连house                    [self.reConnectTimer invalidate];                    self.reConnectTimer = nil;                    self.reConnectTimer = [NSTimer scheduledTimerWithTimeInterval:10.0 target:self selector:@selector(reconnectHouse) userInfo:nil repeats:NO];                }            });        }else        {                    }        //重置重连标志        dispatch_async(dispatch_get_main_queue(), ^{            self.reconectFlag = NO;        });    });}//-(void)DeviceStatusHaveComplished:(NSNotification *)notice-(void )DeviceStatusHaveChanged:(NSNotification *)notice{    [self.hubView hide:YES];    NSDictionary *diction = notice.object;        DeviceModel *mod = [[DeviceModel alloc] initWithDictionary:diction];    NSArray *arr = [_dataList copy];    NSUInteger section = 0;    __block NSUInteger row = 0;        [arr enumerateObjectsUsingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {        if ([(DeviceModel *)obj dev_id] == mod.dev_id) {          //  [_dataList[idx] setObject:diction[@"status"] forKey:@"status"];            ((DeviceModel *)_dataList[idx]).status = diction[@"status"];            row = idx;            *stop = YES;        }    }];        NSIndexPath *indexPath = [NSIndexPath indexPathForRow:row inSection:section];    [_collectionView reloadItemsAtIndexPaths:@[indexPath]];         NSString *sensor_status = [[mod.status[0] objectForKey:@"params"] substringToIndex:2];                if ([sensor_status  isEqual: @"AQ"]) {                        if ([diction[@"status"][0][@"id"] isEqual: @(2)]||[diction[@"status"][0][@"id"] isEqual: @(7)]) {                             [self sendAlarmsWithDiction:diction];            // 发送本地通知        }        }else if ([sensor_status  isEqual: @"CA"]||[sensor_status  isEqual: @"Aw"])        {            if ([diction[@"status"][0][@"id"] isEqual: @(9)]) {                [self sendAlarmsWithDiction:diction];            }        }}-(void )instruction{    [self.displayView refreshAnimationViewWithTag:kImagesIntrusion];}-(void )okay{     [self.displayView refreshAnimationViewWithTag:kImagesOk];}-(void )favorateDeviceUpdated:(NSNotification *)notfice{    NSDictionary *dic = notfice.object;    NSArray *dev_ids = dic[@"dev_list"];        [self createDataList:dev_ids];     [_collectionView reloadSections:[NSIndexSet indexSetWithIndex:0]];}-(void )sendAlarmsWithDiction:(NSDictionary *)diction;{    // 如果是sensor 则继续判断是否有警告操作的必要    for (NSNumber *dev_id in _modeList[@"modes"][_currentMode - 1][@"dev_list"]) {        if ([dev_id isEqualToNumber:[diction objectForKey:@"dev_id"]]) {            [self.alarms setValue:@"AQ" forKey:[NSString stringWithFormat:@"%@",[diction objectForKey:@"dev_id"]]];                        // sensor 触发            [self checkAlarms];                        //  发出警告            [self addAlarmViewsWithDid:[diction objectForKey:@"dev_id"]];        }    }}-(void )getPermission{  //  [[NSUserDefaults standardUserDefaults] setObject:@(1)  forKey:@"password"];        // 获取权限 请求数据    [[P2Phandle shareP2PHandle] getDeviceList];    [[P2Phandle shareP2PHandle] getDeviceStatusList];    [[P2Phandle shareP2PHandle] getRoomList];    [[P2Phandle shareP2PHandle] getSceneList];    [[P2Phandle shareP2PHandle] getModeList];    [[P2Phandle shareP2PHandle] getFavorateDevicesWithUUID:[SvUDIDTools UDID]];        //用户列表    [[P2Phandle shareP2PHandle ] memberList];}-(void )temperatureUpdates:(NSNotification *)notice{    NSDictionary *dict = notice.object;        if ([dict.allKeys containsObject:@"temp"]) {        [self.displayView.tempView updateContents:[NSString stringWithFormat:@"%@℃",dict[@"temp"]]];    }        if ([dict.allKeys containsObject:@"humi"]) {        [self.displayView.humiView updateContents:[NSString stringWithFormat:@"%@%%rh",dict[@"humi"]]];    }    }-(void )weatherUpdates:(NSNotification *)notice{    NSDictionary *dict = notice.object;        if ([dict.allKeys containsObject:@"pm"]) {        [self.displayView.PMView updateContents:[NSString stringWithFormat:@"PM2.5  %@",dict[@"pm"]]];    }        if ([dict.allKeys containsObject:@"weather"]) {        [self.displayView.sunyView updateContents:[NSString stringWithFormat:@"%@",dict[@"weather"]]];    }    }//添加通知- (void)addNotifications {            [[NSNotificationCenter defaultCenter] addObserver:self                                             selector:@selector(disConnected:)                                                 name:KNotificationP2PDidDisConnected                                               object:nil];        [[NSNotificationCenter defaultCenter] addObserver:self                                             selector:@selector(willConnectToP2P:)                                                 name:KNotificationP2PWillConnect                                               object:nil];        [[NSNotificationCenter defaultCenter] addObserver:self                                             selector:@selector(didConnectToP2P:)                                                 name:KNotificationP2PDidConnected                                               object:nil];            [[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(modeTrigger:) name:kNotification_modeTrigger object:nil];    // UIApplication    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(willEnterForegroud) name:UIApplicationWillEnterForegroundNotification object:nil];    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(willEnterBackground) name:UIApplicationDidEnterBackgroundNotification object:nil];        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(modeListUpdated:) name:kNotification_modeListUpdated object:nil];        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(homeChanged) name:kNotification_homeChanged object:nil];        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(DeviceStatusHaveChanged:) name:kNotification_controlDevice object:nil];        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(statusListUpdated:) name:knotification_statusList object:nil];        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(favorateDeviceUpdated:) name:kNotification_FavorateDeviceListUpdated object:nil];    //设备删除 可能需要将 常用列表更新  编辑  也是 可能名字有更变    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(deviceDeleted:) name:kNotification_deviceDeleted object:nil];    [[NSNotificationCenter defaultCenter]  addObserver:self selector:@selector(deviceEdited:) name:kNotification_deviceEditted object:nil];        [[NSNotificationCenter defaultCenter]  addObserver:self selector:@selector(getPermission) name:NOTIFICATION_PERMISSION object:nil];        //温湿度监测    [[NSNotificationCenter defaultCenter]  addObserver:self selector:@selector(temperatureUpdates:) name:NOTIFICATION_TEM_HUM object:nil];        // 天气检测    [[NSNotificationCenter defaultCenter ] addObserver:self selector:@selector(weatherUpdates:) name:NOTIFICATION_WEIGHTER object:nil];    }//移除通知- (void)removeNotifications {        [[NSNotificationCenter defaultCenter] removeObserver:self];}#pragma mark - 判断警告-(void )checkAlarms{    NSDictionary *dic = [self.alarms copy];    [self.alarms removeAllObjects];        if (_currentMode != 0) {            for (NSNumber *dev_id in _modeList[@"modes"][_currentMode - 1][@"dev_list"]) {        for (NSString *did in dic.allKeys) {            if ([did isEqualToString:[NSString stringWithFormat:@"%@",dev_id]]) {                [self.alarms setObject:@"AQ" forKey:did];                break;            }        }    }    }else    {            }        [self refreshDisplayView];}-(void )addAlarmViewsWithDid:(NSNumber *)dev_id{    DeviceModel *dev = [[fileOperation sharedOperation] getDeviceWithDev_ID:@[dev_id]][0];        DisConnectedBtn * btn = [DisConnectedBtn disConnectedBtn];        [btn setAlarms:[NSString stringWithFormat:@"%@ %@",dev.name,NSLocalizedString(@"Triggered", nil)]];    }#pragma mark - local notification-(void )pushLocalNotificationWithDictionary:(NSDictionary *)diction{    UILocalNotification *notification = [[UILocalNotification alloc] init];#if 0    DeviceModel *device = [[fileOperation sharedOperation] getDeviceWithDev_ID:@[diction[@"dev_id"]]][0];    NSString *img = [[fileOperation sharedOperation] getImageNameWithDevice_type:device.dev_type device_mode:device.mode][@"danger"];    // 1.创建本地通知    UILocalNotification *localNote = [[UILocalNotification alloc] init];        // 2.设置本地通知的内容    // 2.1.设置通知发出的时间    localNote.fireDate = [NSDate dateWithTimeIntervalSinceNow:1.0];    // 2.2.设置通知的内容    localNote.alertBody = [NSString stringWithFormat:@"%@ Triggered",device.name];    // 2.3.设置滑块的文字（锁屏状态下：滑动来“解锁”）    // localNote.alertAction = @"解锁";    // 2.4.决定alertAction是否生效   // localNote.hasAction = NO;    // 2.5.设置点击通知的启动图片    localNote.alertLaunchImage = img;    // 2.6.设置alertTitle    localNote.alertTitle = @"Dangerous";    // 2.7.设置有通知时的音效    //localNote.soundName = @"buyao.wav";    // 2.8.设置应用程序图标右上角的数字   // localNote.applicationIconBadgeNumber = 999;        // 2.9.设置额外信息    localNote.userInfo = @{@"type" : @1};        // 3.调用通知    [[UIApplication sharedApplication] scheduleLocalNotification:localNote];    // 设置通知的提醒时间    NSDate *currentDate   = [NSDate date];    notification.timeZone = [NSTimeZone defaultTimeZone]; // 使用本地时区    notification.fireDate = [currentDate dateByAddingTimeInterval:1.0];        // 设置重复间隔    //  notification.repeatInterval = kCFCalendarUnitDay;        // 设置提醒的文字内容    notification.alertBody   = @"111";        // notification.alertAction = NSLocalizedString(@"起床了", nil);        // 通知提示音 使用默认的    notification.soundName= UILocalNotificationDefaultSoundName;        // 设置应用程序右上角的提醒个数    //  notification.applicationIconBadgeNumber++;        // 设定通知的userInfo，用来标识该通知    NSMutableDictionary *aUserInfo = [[NSMutableDictionary alloc] init];    //  aUserInfo[kLocalNotificationID] = @"LocalNotificationID";    notification.userInfo = aUserInfo;        // 将通知添加到系统中    [[UIApplication sharedApplication] scheduleLocalNotification:notification];    #endif}#pragma mark - 界面管理-(void)createDisconnectedBtn{    [self.view addSubview:self.disConnectedBtn];    [self.view bringSubviewToFront:self.disConnectedBtn];    //如果未连接上 则 发送连接失败的通知    if (self.wifiReachability.currentReachabilityStatus == NotReachable) {        NSNotification * notifi = [[NSNotification alloc] initWithName:KNotificationP2PDidDisConnected                                                                object:@(DisConnectedFailed)                                                              userInfo:nil];        [[NSNotificationCenter defaultCenter] postNotification:notifi];    }        //如果房屋数量为零 则发送连接失败的通知    if ([HouseModelHandle shareHouseHandle].houses.count < 1) {        [[NSNotificationCenter defaultCenter] postNotificationName:KNotificationP2PDidDisConnected object:@(DisConnectedNoHouse)];    }}-(void )refreshUI{    // 接到房间通知  跟新 列表    [self createDataList:nil];         dispatch_async(dispatch_get_main_queue(), ^{             [_collectionView reloadSections:[NSIndexSet indexSetWithIndex:0]];   });}//懒加载conectedBtn- (DisConnectedBtn *)disConnectedBtn {    if (!_disConnectedBtn) {        DisConnectedBtn * btn = [DisConnectedBtn disConnectedBtn];        btn.frame = CGRectMake(0, 20, CGRectGetWidth(self.view.frame), 0);        btn.hidden = YES;        [btn addTarget:self action:@selector(disConnectedBtnClick:) forControlEvents:UIControlEventTouchUpInside];        _disConnectedBtn = btn;            }        return _disConnectedBtn;}-(void )refreshDisplayView{    if (self.alarms.allKeys.count == 0)    {        self.imagesType = kImagesOk;    }else    {        self.imagesType = kImagesIntrusion;    }        [self.displayView refreshAnimationViewWithTag:self.imagesType];}#pragma mark - 摇动事件- (void)motionBegan:(UIEventSubtype)motion withEvent:(UIEvent *)event {    //震动刷新    [[P2Phandle shareP2PHandle] getDeviceStatusList];        // 播放震动    AudioServicesPlaySystemSound(kSystemSoundID_Vibrate);        return;}#pragma mark - FavoriteDelegate-(void)haveSeletedFavorateDevices:(NSArray *)devices{        NSArray *dev = [[fileOperation sharedOperation] getDeviceWithDev_ID:devices];    [_dataList removeAllObjects];    [_dataList addObjectsFromArray:dev];         [_collectionView reloadSections:[NSIndexSet indexSetWithIndex:0]];}-(void )homeChanged{    // 接到房间通知  跟新 列表    [self createDataList:nil];        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(1 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{            [_collectionView reloadData];         });}#pragma mark - oprationViewDelegate-(void)oprerationButtonClicked:(NSInteger )tag{    if ([[P2Phandle shareP2PHandle] linkState] == P2PLinkConnnected) {                [[P2Phandle shareP2PHandle] setCurrentMode:tag-100];    }else    {        [self showWithTime:hubAnimationTime title:kConnectedFailed];    }}#pragma mark - alarms-(NSMutableDictionary *)alarms{    if (_alarms == nil) {        _alarms = [[NSMutableDictionary alloc] init];    }    return _alarms;}#pragma mark - life-(void)viewWillAppear:(BOOL)animated{    [self refreshDisplayView];    [self.navigationController.navigationBar setHidden:YES];       // [self.operView selectAnyBtn:_currentMode+100];}@end