////  P2Phandle.m//  security////  Created by sen5labs on 15/11/25.//  Copyright © 2015年 sen5. All rights reserved.//#import "P2Phandle.h"#import "CamObj.h"#import "DelegateCamera.h"#import "PPCS_API.h"#import "XMLDictionary.h"#import "SvUDIDTools.h"#import "fileOperation.h"#import "JSONKit.h"#import "GTMBase64.h"NSString * const SocketDidReadDataNotification = @"SocketDidReadDataNotification";NSString * const KNotificationP2PWillConnect = @"KNotificationP2PWillConnect";NSString * const KNotificationP2PDidConnected = @"KNotificationP2PDidConnected";NSString * const KNotificationP2PDidDisConnected = @"KNotificationP2PDidDisConnected";//客户端请求命令NSString * const getActionData                       = @"getActionData";NSString * const getCameraData                       = @"getCameraData";NSString * const getHouseSecState                    = @"getHouseSecState";NSString * const getActionStatusData                 = @"getActionStatusData";NSString * const resultgetActionData                 = @"resultgetActionData";NSString * const resultgetCameraData                 = @"resultgetCameraData";NSString * const resultgetHouseSecState              = @"resultgetHouseSecState";NSString * const resultgetActionStatusData           = @"resultgetActionStatusData";NSString * const switchPower                         = @"switchPower";NSString * const resultswitchPower                   = @"resultswitchPower";NSString * const resultswitchPowerID                 = @"resultswitchPowerID";NSString * const resultswitchPowerStatus             = @"resultswitchPowerStatus";NSString * const switchHouseSecState                 = @"switchHouseSecState";NSString * const resultswitchHouseSecState           = @"resultswitchHouseSecState";NSString * const switchCamera                        = @"switchCamera";NSString * const resultswitchCamera                  = @"resultswitchCamera";NSString * const checkUserID                         = @"checkUserID";NSString * const resultCheckUserID                   = @"resultCheckUserID";static P2Phandle * p2pHandle = nil;@interface P2Phandle () <DelegateCamera>@property (nonatomic, strong) CamObj *camObj;@property (nonatomic,assign) int handleSession;@property (nonatomic, assign) P2PLinkState linkState;@property (nonatomic, assign) VideoResolutionType videoresolutionType;@end@implementation P2Phandle+ (instancetype)shareP2PHandle {    static dispatch_once_t onceToken;    dispatch_once(&onceToken, ^{        p2pHandle = [[P2Phandle alloc] init];    });    return p2pHandle;}- (instancetype)init{    self = [super init];    if (self) {        //实例化        self.camObj=[[CamObj alloc] init];        self.camObj.m_delegateCam = self;        self.initivalDisConnect = false;                        //        [[NSNotificationCenter defaultCenter] addObserverForName:KNotificationP2PDidDisConnected object:self queue:[NSOperationQueue mainQueue] usingBlock:^(NSNotification * _Nonnull note) {        //            weakSelf.linkState = P2PLinkUnConnnected;        //        }];        [[NSNotificationCenter defaultCenter] addObserver:self                                                 selector:@selector(disConnectNotification:)                                                     name:KNotificationP2PDidDisConnected                                                   object:nil];        [[NSNotificationCenter defaultCenter] addObserver:self                                                 selector:@selector(socketDidReadDataNotification:)                                                     name:SocketDidReadDataNotification                                                   object:nil];    }    return self;}- (void)dealloc {    [[NSNotificationCenter defaultCenter] removeObserver:self ];}#pragma mark - public- (int)connectWithTimeout:(NSTimeInterval)timeout nsDID:(NSString *)nsDID nsCamName:(NSString *)nsCamName {        [[NSNotificationCenter defaultCenter] postNotificationName:KNotificationP2PWillConnect object:nil];    //   NSAssert(nsDID, @"nsDid 不能为nil");        //设置camera属性    if (nsDID != nil) {            self.camObj.nsDID = nsDID;    self.camObj.nsCamName = nsCamName;    self.linkState = P2PLinkConnecting;    //返回连接结果    self.handleSession = (int)[self.camObj startConnect:timeout];    //连接成功    if (self.handleSession >= 0) {        self.linkState = P2PLinkConnnected;        //判断设备ID        int ret = [self writeWithOptions:@{checkUserID:[SvUDIDTools UDID]}];        //        int ret = [self writeWithOptions:@{checkUserID:@"12321323211312312"}];        MYLog(@"----------------UserId = %@",[SvUDIDTools UDID]);        MYLog(@"kaka---->zihai.xu---->ret = %d",ret);        [self setNotificationWithConnected:YES];    } else {        //连接失败        self.linkState = P2PLinkUnConnnected;        [self disConnect];    }        return self.handleSession;    }else    {         self.linkState = P2PLinkUnConnnected;        //否则连接失败        return -1;    }}- (void)disConnect {        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{        [self.camObj stopAll];    });        //设置连接属性为关闭 并关闭所有cameraObject    self.linkState = P2PLinkUnConnnected;    [self setNotificationWithConnected:NO];}/** *  因为check userId fail 主动断开连接. */- (void) disConnectForCheckUserIdFail{    self.linkState = P2PLinkUnConnnected;    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{        [self.camObj stopAll];    });}- (int )writeWithOptions:(NSDictionary *)options {            //根据发送的数据的返回值  设置linkstate 并发送通知    int result = [self.camObj writeWithDic:options sessionHandle:self.handleSession];    // [self.camObj readDataWithHandleSession:self.handleSession];    //  NSLog(@"sendData result = %d",result);    if (result < 0 && result != ERROR_PPCS_TIME_OUT) {        self.linkState = P2PLinkUnConnnected;        //若果result 小于零 则发送失败的通知        [self setNotificationWithConnected:NO];    }else    {        MYLog(@"%@数据发送成功",options);    }        return result;}//开始视频- (int)startVideo {    int nRet = (int)[self.camObj startVideo];    if (nRet >= 0) {            } else {            }    NSLog(@"startVideo(..): PPCS_Write(..)=%ld\n", (long)nRet);    return nRet;}//结束视频- (void)stopVideo {    [self.camObj stopVideo];}//设置视频类型- (int)setResolutionWithVideoResolution:(VideoResolutionType)videoResolutionType {    int nRet = [self.camObj setResolutionWithVideoResolution:videoResolutionType];    if (nRet >= 0) {        self.videoresolutionType = videoResolutionType;    }    return nRet;}//跳转camera 00x0 00x1- (int) SwitchCamera:(CameraType) camera{    int nRet = [self.camObj SwitchCamera:camera];    if (nRet >= 0) {        self.camera = camera;    }    return nRet;}//添加新设备#pragma mark - Notification//接收到断开连接的通知 设置linkState 为unconnected- (void)disConnectNotification:(NSNotification *)notification {    self.linkState = P2PLinkUnConnnected;}//读取checkUseID的返回结果- (void)socketDidReadDataNotification:(NSNotification *)notification {        // why use it so low    NSDictionary * dic = notification.object;        if ([dic.allKeys containsObject:resultCheckUserID]) {        NSNumber *result = dic[resultCheckUserID];        //读取userID失败 并把userID传出        if (result.intValue == 0) { //checkUserID失败            MYLog(@"kaka----->checkUserID 失败....");            self.initivalDisConnect = true;            [self disConnectForCheckUserIdFail];            [[NSNotificationCenter defaultCenter] postNotificationName:KNotificationP2PDidDisConnected object:@"userId"];        }    }}#pragma mark - DelegateCamera//读取返回的内容 并发送SocketDidReadDataNotification的通知- (void)receiveString:(NSString *)recvString {       // if (recvString != nil) {            //NSACIIStringEncoding    NSData *data = [recvString dataUsingEncoding:NSUTF8StringEncoding];    NSError * error = nil;    NSDictionary * dic = [NSJSONSerialization JSONObjectWithData:data                                                         options:NSJSONReadingMutableContainers                                                           error:&error];       // NSLog(@"the receive string is %@",dic);    if (error) {        MYLog(@"%@",error.localizedDescription);    }        if ([dic.allKeys containsObject:resultgetActionData]) {        NSDictionary * subDic = [NSDictionary dictionaryWithXMLString:dic[resultgetActionData]];        dic = @{resultgetActionData:subDic?subDic:@""};    };        if ([dic.allKeys containsObject:resultgetActionStatusData]) {                NSDictionary * subDic = [NSDictionary dictionaryWithXMLString:dic[resultgetActionStatusData]];        dic = @{resultgetActionStatusData:subDic?subDic:@""};    }        dispatch_async(dispatch_get_main_queue(), ^{        [[NSNotificationCenter defaultCenter] postNotificationName:SocketDidReadDataNotification object:dic];    });    //}//改变结构}- (void)refreshFrame:(uint8_t *)imgData withVideoWidth:(NSInteger)width videoHeight:(NSInteger)height withObj:(NSObject *)obj{    MYLog(@"refreshFrame");}//改变session信息- (void)refreshSessionInfo:(int)infoCode withObj:(NSObject *)obj withString:(NSString *)strValue;{    MYLog(@"refreshSessionInfo:obj:strValue");}- (void)refreshSessionInfo:(NSInteger)mode                  OnlineNm:(NSInteger)onlineNm                TotalFrame:(NSInteger)totalFrame                      Time:(NSInteger)time_s{    float fFPS=0.0f;    if(time_s>0)fFPS=totalFrame*1.0f/time_s;        NSString *nsMode=@"Unknown";    if(mode==CONN_MODE_P2P) nsMode=@"P2P";    else if(mode==CONN_MODE_RLY) nsMode=@"Relay";    MYLog(@"FPS:%f,Mode:%@",fFPS,nsMode);}- (void)updateRecvIOCtrl:(int)ioType withIOData:(char *)pIOData withSize:(int)nIODataSize withObj:(NSObject *)obj{    MYLog(@"updateRecvIOCtrl ioType:%d,pIOData:%s ,size:%d, obj:%@",ioType,pIOData,nIODataSize,obj);}#pragma mark - private- (void)setNotificationWithConnected:(BOOL)isConnected {    NSString *notificationName = isConnected?KNotificationP2PDidConnected:KNotificationP2PDidDisConnected;    [[NSNotificationCenter defaultCenter] postNotificationName:notificationName object:nil];}#pragma mark - 设备房间场景相关操作//获取设备列表-(int)getDeviceList{    //请求房间的设备列表{@“msg_type”:4}msg_type:101,    int ret = [self writeWithOptions:@{@"msg_type":@(101)}];    return ret;}//编辑设备-(int)editDeviceWithDeviceID:(NSInteger)dev_id name:(NSString *)dev_name roomID:(NSInteger)room_id tableID:(NSInteger )table_id{    NSString *dev_name_ = [dev_name stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];        NSDictionary *dic = @{@"msg_type":@(102),@"dev_id":@(dev_id),@"name":dev_name_,@"room_id":@(room_id)};        int ret = [self writeWithOptions:dic];            return ret;}//新增设备-(int)addNewDevice{    NSDictionary *dic = @{@"msg_type":@(103)};   // NSDictionary *dic = @{@"msg_type":@(0)};        int ret = [self writeWithOptions:dic];        return ret;}//删除设备-(int)deleteDevicewithDeviceID:(NSInteger)dev_id tableID:(NSInteger)table_id{    NSDictionary *dic = @{@"msg_type":@(104),@"dev_id":@(dev_id)};        int ret = [self writeWithOptions:dic];        return ret;}//控制设备-(int)ControlDeviceWithDeviceID:(NSInteger)dev_id tableID:(NSInteger)table_id action:(NSInteger )action{    NSString *paraStr = nil;    if (action == 0) {        paraStr = @"AA==";    }else    {        paraStr = @"AQ==";    }        NSDictionary *dic = @{@"msg_type":@(105),@"dev_id":@(dev_id),@"action_id":@(1),@"action_params":paraStr};       //  NSDictionary *dic = @{@"msg_type":@(2),@"dev_id":@(dev_id),@"table_id":@(table_id),@"action":@(action)};        int ret = [self writeWithOptions:dic];        return ret;}//获取设备状态-(int )getDeviceStatus:(NSInteger)dev_id{    NSDictionary *dic = @{@"msg_type":@(106),@"dev_id":@(dev_id)};        int ret = [self writeWithOptions:dic];        return ret;}//获取设备状态列表-(int )getDeviceStatusList{    NSDictionary *dic = @{@"msg_type":@(107)};        int ret = [self writeWithOptions:dic];        return ret;}//设置常用设备 及 获取常用设备-(int )setFavorateDevicesWithUUID:(NSString *)UUID dev_list:(NSArray *)dev_list{//{//msg_type:501,//user_id:"6e5a0e85-b4a0-485f-be54-a758115317e1", //一个UUID//dev_list:[111,222,333]//}    NSDictionary *dic = @{@"msg_type":@(501),@"user_id":UUID,@"dev_list":dev_list};        int ret = [self writeWithOptions:dic];        return  ret;}-(int )getFavorateDevicesWithUUID:(NSString *)UUID{//msg_type:502,//user_id:"6e5a0e85-b4a0-485f-be54-a758115317e1"    NSDictionary *dic = @{@"msg_type":@(502),@"user_id":UUID};        int ret = [self writeWithOptions:dic];        return ret;}//获取房间列表-(int)getRoomList{    int ret = [self writeWithOptions:@{@"msg_type":@(201)}];        return ret;}//新增房间//dev_list:[{table_id:1, dev_id:111},...]-(int)addNewRoomWithName:(NSString *)name dev_list:(NSArray<NSDictionary *>*)dev_list{     NSString * name_ = [name stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];        NSDictionary *dic = @{@"msg_type":@(202),@"dev_list":dev_list,@"room_name":name_};        int ret = [self writeWithOptions:dic];        return ret;}//删除房间-(int )deleteRoomWithRoomID:(NSInteger )room_id{    NSDictionary *dic = @{@"msg_type":@(203),@"room_id":@(room_id)};        int ret = [self writeWithOptions:dic];        return ret;}//编辑房间-(int)editRoomWithRoodID:(NSInteger)room_id name:(NSString *)room_name deviceList:(NSArray *)dev_list{    NSString * name_ = [room_name stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];        NSDictionary *dic =@{@"msg_type":@(204),@"room_id":@(room_id),@"dev_list":dev_list,@"room_name":name_};        int ret = [self writeWithOptions:dic];        return ret    ;}//获取场景列表-(int)getSceneList{    int ret = [self writeWithOptions:@{@"msg_type":@(301)}];        return ret;}//新建场景-(int )addNewSceneWithSceneName:(NSString *)sceneName mode:(NSInteger)mode actionList:(NSArray<NSDictionary *> *)actionList{    // 后台还没有调好 mode值先不传,@"select_mode":@(mode)        NSString * name_ = [sceneName stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];        NSDictionary *dic = @{@"msg_type":@(302),@"action_list":actionList,@"scene_name":name_};        int ret = [self writeWithOptions:dic];        return ret;    }//删除场景-(int )deleSceneWithSceneID:(NSInteger)scene_id{    NSDictionary *dic = @{@"msg_type":@(303),@"scene_id":@(scene_id)};        int ret = [self writeWithOptions:dic];        return ret;}//编辑场景-(int )editSceneWithWithSceneID:(NSInteger )scene_id sceneName:(NSString *)scene_name sceneMode:(NSInteger )scene_mode action_list:(NSArray <NSDictionary *> *)action_list{    //,@"select_mode":@(scene_mode)     NSString * name_ = [scene_name stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];    NSDictionary *dic = @{@"msg_type":@(304),@"scene_name":name_,@"action_list":action_list,@"scene_id":@(scene_id)};        int ret = [self writeWithOptions:dic];        return ret;    }//触发场景-(int )triggerSceneWithID:(NSInteger )scene_id{    NSDictionary *dic = @{@"msg_type":@(305),@"scene_id":@(scene_id)};        int ret = [self writeWithOptions:dic];        return ret;}//模式列表-(int )getModeList{    NSDictionary *dic = @{@"msg_type":@(401)};    int ret = [self writeWithOptions:dic];    return ret;}//编辑模式-(int )editModeWithSec_mode:(NSInteger )sec_mode no_motion:(NSInteger )no_motion dev_list:(NSArray *)dev_list{    //NSString * name_ = [sceneName stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];        NSDictionary *dic = @{@"msg_type":@(402),@"sec_mode":@(sec_mode),@"no_motion":@(no_motion),@"dev_list":dev_list};        int ret = [self writeWithOptions:dic];    return ret ;}//设置当前模式-(int )setCurrentMode:(NSInteger )cur_sec_mode{    NSDictionary *dic = @{@"msg_type":@(403),@"cur_sec_mode":@(cur_sec_mode)};        int ret = [self writeWithOptions:dic];        return ret;}//身份验证-(int )authenticate{    NSString *did = [[SvUDIDTools UDID] stringByReplacingOccurrencesOfString:@"-" withString:@""];        NSDictionary *dic = @{@"msg_type":@(601),@"identity_id":did};        int ret = [self writeWithOptions:dic];        return ret;}//用户列表-(int )memberList{    NSDictionary *dic = @{@"msg_type":@(602)};        int ret = [self writeWithOptions:dic];        return ret;}@end